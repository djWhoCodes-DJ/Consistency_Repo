08/08/2023

GFG POTD SOLUTION

class Solution
{
    public:
    int countFractions(int n, int numerator[], int denominator[])
    {   
        map<pair<int,int>,int> mp;
        int ans=0;
        for(int i=0;i<n;i++){
            int d = __gcd(numerator[i],denominator[i]);
            int a=numerator[i]/d;
            int b=denominator[i]/d;
            int diff=b-a;
            if(mp.find({diff,b})!=mp.end()) ans+=mp[{diff,b}];
            mp[{a,b}]++;
        }
        return ans;
    }
};



09/08/2023

GFG POTD SOLUTION

long long int largestPrimeFactor(int n){
        // code here
        vector <int>ans;
        for(int i=2;i<=n;i++)
        {
            while(n%i==0)
            {
                ans.push_back(i);
                n=n/i;
            }
        }
        int maxi=-1;
        for(int i=0;i<ans.size();i++)
        {
            if(ans[i]>maxi)
            {
                maxi=ans[i];
            }
        }
        return maxi;
    }




10/08/2023

GFG POTD SOLUTION

class Solution
{
    //recursive
    static int solve(int i,int j,String s1,String s2,int n,int m){
        if(i>=n || j>=m)return 0;
        
        int ans=0;
        if(s1.charAt(i)==s2.charAt(j)){
            ans=1+solve(i+1,j+1,s1,s2,n,m);
        }else{
            ans=Math.max(solve(i+1,j,s1,s2,n,m),solve(i,j+1,s1,s2,n,m));
        }
        
        return ans;
    }
    //DP
    static int solve_DP(int i,int j,int[][] dp,String s1,String s2,int n,int m){
        if(i>=n || j>=m)return 0;
        if(dp[i][j]!=-1)return dp[i][j];
        int ans=0;
        if(s1.charAt(i)==s2.charAt(j)){
            ans=1+solve_DP(i+1,j+1,dp,s1,s2,n,m);
        }else{
            ans=Math.max(solve_DP(i+1,j,dp,s1,s2,n,m),solve_DP(i,j+1,dp,s1,s2,n,m));
        }
        
        return dp[i][j]=ans;
    }
    //Bottom UP dp
    static int solve_Tab(int n, int m, String s1, String s2){
        int[][] dp=new int[n+1][m+1];
        
        for(int i=n-1;i>=0;i--){
            for(int j=m-1;j>=0;j--){
                int ans=0;
                if(s1.charAt(i)==s2.charAt(j)){
                    ans=1+dp[i+1][j+1];
                }else{
                    ans=Math.max(dp[i+1][j],dp[i][j+1]);
                }
                dp[i][j]=ans;
            }
        }
        return dp[0][0];
    }
    //Space optimazation
    static int solve_Space(int n1, int n2, String a, String b){
        //space complexity is min(n,m);
        int[] currRow = new int[n2 + 1];
        int[] nextRow = new int[n2 + 1];

        for (int i = n1 - 1; i >= 0; i--) {
            for (int j = n2 - 1; j >= 0; j--) {
                int ans = 0;

                if (a.charAt(i) == b.charAt(j))
                    ans = 1 + nextRow[j + 1];
                else
                    ans = Math.max(nextRow[j], currRow[j + 1]);

                currRow[j] = ans;
            }

            System.arraycopy(currRow, 0, nextRow, 0, n2 + 1);
        }

        return nextRow[0];
    }
    static int lcs(int n, int m, String s1, String s2)
    {
        // recursive
        //return solve(0,0,s1,s2,n,m);
        
        //DP
        // int[][] dp=new int[n][m];
        // for(int[] d:dp)Arrays.fill(d,-1);
        // return solve_DP(0,0,dp,s1,s2,n,m);
        
        //Bottom UP
        // return solve_Tab(n,m,s1,s2);
        
        //space optimize
        return solve_Space(n,m,s1,s2);
        
    }
    
}


LEETCODE

class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int l = 0;
        int r = nums.size() - 1;
        
        while(l <= r)
        {
            int mid = l + (r-l) / 2;
            if (nums[mid] == target)
                return true;
			// with duplicates we can have this contdition, just update left & right
            if((nums[l] == nums[mid]) && (nums[r] == nums[mid]))
            {
                l++;
                r--;
            }
			// first half
			// first half is in order
            else if(nums[l] <= nums[mid])
            {
				// target is in first  half
                if((nums[l] <= target) && (nums[mid] > target))
                    r = mid - 1;
                else
                    l = mid + 1;
            }
			// second half
			// second half is order
			// target is in second half
            else
            {
                if((nums[mid] < target) && (nums[r]>= target))
                    l = mid + 1;
                else
                    r = mid - 1;
            }
        }
        return false;
    }
	// for github repository link go to my profile.
};



11/08/2023


GFG POTD

class Solution {
  public:
    long long int dp[1001][1001]; 
    int n;
    long long int helper(int indx, int target, int* coins){
        if (target == 0)
        return 1;
        
        if (indx == n)
        return 0;
        
        if (dp[indx][target] != -1)
        return dp[indx][target];
        
        long long int take = 0, skip = 0;
        if (target >= coins[indx])
        take = helper(indx,target - coins[indx],coins);
        skip = helper(indx+1, target, coins);

        return dp[indx][target] = take + skip;
    }
long long int count(int coins[], int N, int sum) {
    memset(dp,-1,sizeof(dp));
        n = N;
        return helper(0,sum,coins);
}
};




12/08/2023


GFG POTD Solution

class Solution
{
    public:
    //Function to find length of longest increasing subsequence.
    int longestSubsequence(int n, int a[])
    {
      vector<int> piles;
        
        for (int i = 0; i < n; i++) {
            auto it = lower_bound(piles.begin(), piles.end(), a[i]);
            if (it == piles.end()) {
                piles.push_back(a[i]);
            } else {
                *it = a[i];
            }
        }
        
        return piles.size();
    }
};


